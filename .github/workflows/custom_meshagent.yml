name: Custom MeshAgent Pipeline

on:
  push:
  pull_request:

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Prepare MeshAgent header path
        run: |
          New-Item -ItemType Directory -Force -Path MeshAgent\meshcore\generated | Out-Null

      - name: Resolve custom core binaries
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          New-Item -ItemType Directory -Force -Path custom_meshagent\build\inputs | Out-Null
          if ($env:BINARY_X64_URL) {
            Invoke-WebRequest -Uri $env:BINARY_X64_URL -OutFile custom_meshagent\build\inputs\core64.exe -UseBasicParsing
          } elseif (Test-Path env:BINARY_X64_PATH) {
            Copy-Item $env:BINARY_X64_PATH custom_meshagent\build\inputs\core64.exe
          }
          if ($env:BINARY_X86_URL) {
            Invoke-WebRequest -Uri $env:BINARY_X86_URL -OutFile custom_meshagent\build\inputs\core86.exe -UseBasicParsing
          } elseif (Test-Path env:BINARY_X86_PATH) {
            Copy-Item $env:BINARY_X86_PATH custom_meshagent\build\inputs\core86.exe
          }
          if (-not (Test-Path custom_meshagent\build\inputs\core64.exe) -and -not (Test-Path custom_meshagent\build\inputs\core86.exe)) {
            Write-Host "No custom cores supplied via secrets; falling back to notepad.exe for demo build"
            Copy-Item C:\Windows\System32\notepad.exe custom_meshagent\build\inputs\core64.exe
            Copy-Item C:\Windows\System32\notepad.exe custom_meshagent\build\inputs\core86.exe
          }

      - name: Validate config
        run: |
          python custom_meshagent\scripts\meshagent_build.py validate --config custom_meshagent\configs\ip_only_acme.json

      - name: Generate artifacts
        run: |
          python custom_meshagent\scripts\meshagent_build.py generate --config custom_meshagent\configs\ip_only_acme.json --meshagent-root .\MeshAgent

      - name: Package x64 (if core present)
        shell: pwsh
        run: |
          if (Test-Path custom_meshagent\build\inputs\core64.exe) {
            python custom_meshagent\scripts\meshagent_build.py package --config custom_meshagent\configs\ip_only_acme.json --binary custom_meshagent\build\inputs\core64.exe --nsis --arch x64
          } else { Write-Host "[skip] no x64 core" }

      - name: Package x86 (if core present)
        shell: pwsh
        run: |
          if (Test-Path custom_meshagent\build\inputs\core86.exe) {
            python custom_meshagent\scripts\meshagent_build.py package --config custom_meshagent\configs\ip_only_acme.json --binary custom_meshagent\build\inputs\core86.exe --nsis --arch x86
          } else { Write-Host "[skip] no x86 core" }

      - name: Upload generated artifacts
        uses: actions/upload-artifact@v4
        with:
          name: generated
          path: |
            custom_meshagent/build/meshagent/generated/**

      - name: Upload bundle (staging)
        uses: actions/upload-artifact@v4
        with:
          name: bundle
          path: custom_meshagent/build/meshagent/output/**

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    env:
      PUBLIC_HOSTNAME: ${{ secrets.PUBLIC_HOSTNAME || 'high.support' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: bundle
          path: bundle

      - name: Set timestamp env
        run: echo "TS=$(date +%Y%m%d-%H%M%S)" >> $GITHUB_ENV

      - name: Prepare remote dirs (agents, archive, slow slot)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            set -e
            mkdir -p "${{ secrets.REMOTE_MESHCENTRAL_DATA }}/agents"
            mkdir -p "${{ secrets.REMOTE_MESHCENTRAL_DATA }}/agents-archive/${TS}"
            mkdir -p "${{ secrets.REMOTE_MESHCENTRAL_WEB }}/agents-slow"

      - name: Upload to live agents
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          source: |
            bundle/staging/MeshService.exe
            bundle/staging/MeshService64.exe
          target: ${{ secrets.REMOTE_MESHCENTRAL_DATA }}/agents
          overwrite: true

      - name: Upload to archive (timestamped)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          source: |
            bundle/staging/MeshService.exe
            bundle/staging/MeshService64.exe
          target: ${{ secrets.REMOTE_MESHCENTRAL_DATA }}/agents-archive/${{ env.TS }}
          overwrite: true

      - name: Upload to custom Windows slot (slow channel)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          source: |
            bundle/staging/MeshService.exe
            bundle/staging/MeshService64.exe
          target: ${{ secrets.REMOTE_MESHCENTRAL_WEB }}/agents-slow
          overwrite: true

      - name: Restart MeshCentral
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            sudo systemctl restart meshcentral || sudo systemctl restart meshcentral.service || true

      - name: Verify live endpoints
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            set -e
            echo "[verify] agents dir"
            ls -la ${{ secrets.REMOTE_MESHCENTRAL_DATA }}/agents
            echo "[verify] archive dir"
            ls -la ${{ secrets.REMOTE_MESHCENTRAL_DATA }}/agents-archive/${TS}
            echo "[verify] slow slot"
            ls -la ${{ secrets.REMOTE_MESHCENTRAL_WEB }}/agents-slow
            echo "[verify] http checks"
            curl -I -sS https://${{ env.PUBLIC_HOSTNAME }}/meshagents?id=4 | sed -n '1,6p' || true
            curl -I -sS https://${{ env.PUBLIC_HOSTNAME }}/meshagents?id=3 | sed -n '1,6p' || true
            curl -I -sS https://${{ env.PUBLIC_HOSTNAME }}/agents-slow/MeshService64.exe | sed -n '1,6p' || true
            curl -I -sS https://${{ env.PUBLIC_HOSTNAME }}/agents-slow/MeshService.exe | sed -n '1,6p' || true

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download bundle artifacts
        uses: actions/download-artifact@v4
        with:
          name: bundle
          path: bundle

      - name: Compute tag name
        id: tag
        run: |
          echo "TS=$(date +%Y%m%d-%H%M%S)" >> $GITHUB_ENV
          echo "tag=custom-agents-${GITHUB_SHA:0:7}-$TS" >> $GITHUB_OUTPUT

      - name: Create GitHub Release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: Custom Agents ${{ steps.tag.outputs.tag }}
          body: |
            Automated build of custom agents.
            Includes Windows x64/x86 drop-in binaries for MeshCentral.
          draft: false
          prerelease: false
          files: |
            bundle/staging/MeshService64.exe
            bundle/staging/MeshService.exe
